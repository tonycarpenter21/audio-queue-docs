"use strict";(self.webpackChunkaudio_queue_docs=self.webpackChunkaudio_queue_docs||[]).push([[527],{5752:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"getting-started/browser-compatibility","title":"Browser Compatibility","description":"Browser support and compatibility information for audio-channel-queue","source":"@site/docs/getting-started/browser-compatibility.md","sourceDirName":"getting-started","slug":"/getting-started/browser-compatibility","permalink":"/audio-queue-docs/getting-started/browser-compatibility","draft":false,"unlisted":false,"editUrl":"https://github.com/tonycarpenter21/audio-queue-docs/tree/main/docs/getting-started/browser-compatibility.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Browser Compatibility","description":"Browser support and compatibility information for audio-channel-queue"},"sidebar":"tutorialSidebar","previous":{"title":"Basic Usage Examples","permalink":"/audio-queue-docs/getting-started/basic-usage"},"next":{"title":"Audio Channels","permalink":"/audio-queue-docs/core-concepts/audio-channels"}}');var t=n(4848),i=n(8453);const o={sidebar_position:3,title:"Browser Compatibility",description:"Browser support and compatibility information for audio-channel-queue"},d="\ud83c\udf10 Browser Compatibility",l={},a=[{value:"\u2705 Supported Browsers",id:"-supported-browsers",level:2},{value:"\ud83d\udda5\ufe0f Desktop Browsers",id:"\ufe0f-desktop-browsers",level:3},{value:"\ud83d\udcf1 Mobile Browsers",id:"-mobile-browsers",level:3},{value:"\u26a0\ufe0f Not Supported",id:"\ufe0f-not-supported",level:2},{value:"\ud83d\udd0d Feature Detection",id:"-feature-detection",level:2},{value:"\ud83d\udcf1 Mobile-Specific Considerations",id:"-mobile-specific-considerations",level:2},{value:"iOS Audio Policies",id:"ios-audio-policies",level:3},{value:"Android Audio Considerations",id:"android-audio-considerations",level:3},{value:"\ud83d\udd27 Polyfills and Fallbacks",id:"-polyfills-and-fallbacks",level:2},{value:"Promise Polyfill (for very old browsers)",id:"promise-polyfill-for-very-old-browsers",level:3},{value:"Audio Format Fallbacks",id:"audio-format-fallbacks",level:3},{value:"\ud83e\uddea Testing Browser Support",id:"-testing-browser-support",level:2},{value:"Manual Testing Script",id:"manual-testing-script",level:3},{value:"Automated Testing with Playwright",id:"automated-testing-with-playwright",level:3},{value:"\ud83c\udfaf Best Practices for Cross-Browser Support",id:"-best-practices-for-cross-browser-support",level:2},{value:"1. <strong>Progressive Enhancement</strong>",id:"1-progressive-enhancement",level:3},{value:"2. <strong>Graceful Degradation</strong>",id:"2-graceful-degradation",level:3},{value:"3. <strong>Feature Detection Over Browser Detection</strong>",id:"3-feature-detection-over-browser-detection",level:3},{value:"\ud83d\udcca Browser Usage Statistics",id:"-browser-usage-statistics",level:2},{value:"\ud83d\udd17 Additional Resources",id:"-additional-resources",level:2}];function c(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"-browser-compatibility",children:"\ud83c\udf10 Browser Compatibility"})}),"\n",(0,t.jsxs)(r.p,{children:["Audio Channel Queue is designed for ",(0,t.jsx)(r.strong,{children:"browser environments"})," and uses the Web Audio API (",(0,t.jsx)(r.code,{children:"HTMLAudioElement"}),"). Here's everything you need to know about browser support."]}),"\n",(0,t.jsx)(r.h2,{id:"-supported-browsers",children:"\u2705 Supported Browsers"}),"\n",(0,t.jsx)(r.h3,{id:"\ufe0f-desktop-browsers",children:"\ud83d\udda5\ufe0f Desktop Browsers"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Browser"}),(0,t.jsx)(r.th,{children:"Minimum Version"}),(0,t.jsx)(r.th,{children:"Release Date"}),(0,t.jsx)(r.th,{children:"Support Level"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Chrome"})}),(0,t.jsx)(r.td,{children:"51+"}),(0,t.jsx)(r.td,{children:"June 2016"}),(0,t.jsx)(r.td,{children:"\u2705 Full Support"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Firefox"})}),(0,t.jsx)(r.td,{children:"54+"}),(0,t.jsx)(r.td,{children:"June 2017"}),(0,t.jsx)(r.td,{children:"\u2705 Full Support"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Safari"})}),(0,t.jsx)(r.td,{children:"10+"}),(0,t.jsx)(r.td,{children:"September 2016"}),(0,t.jsx)(r.td,{children:"\u2705 Full Support"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Edge"})}),(0,t.jsx)(r.td,{children:"15+"}),(0,t.jsx)(r.td,{children:"April 2017"}),(0,t.jsx)(r.td,{children:"\u2705 Full Support"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Opera"})}),(0,t.jsx)(r.td,{children:"38+"}),(0,t.jsx)(r.td,{children:"June 2016"}),(0,t.jsx)(r.td,{children:"\u2705 Full Support"})]})]})]}),"\n",(0,t.jsx)(r.h3,{id:"-mobile-browsers",children:"\ud83d\udcf1 Mobile Browsers"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Browser"}),(0,t.jsx)(r.th,{children:"Platform"}),(0,t.jsx)(r.th,{children:"Support Level"}),(0,t.jsx)(r.th,{children:"Notes"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Chrome Mobile"})}),(0,t.jsx)(r.td,{children:"Android 7+"}),(0,t.jsx)(r.td,{children:"\u2705 Full Support"}),(0,t.jsx)(r.td,{children:"Excellent performance"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Safari Mobile"})}),(0,t.jsx)(r.td,{children:"iOS 10+"}),(0,t.jsx)(r.td,{children:"\u2705 Full Support"}),(0,t.jsx)(r.td,{children:"Some audio policy restrictions"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Samsung Internet"})}),(0,t.jsx)(r.td,{children:"Android 7+"}),(0,t.jsx)(r.td,{children:"\u2705 Full Support"}),(0,t.jsx)(r.td,{children:"Based on Chromium"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Firefox Mobile"})}),(0,t.jsx)(r.td,{children:"Android 7+"}),(0,t.jsx)(r.td,{children:"\u2705 Full Support"}),(0,t.jsx)(r.td,{children:"Good performance"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Edge Mobile"})}),(0,t.jsx)(r.td,{children:"iOS/Android"}),(0,t.jsx)(r.td,{children:"\u2705 Full Support"}),(0,t.jsx)(r.td,{children:"Based on Chromium"})]})]})]}),"\n",(0,t.jsx)(r.h2,{id:"\ufe0f-not-supported",children:"\u26a0\ufe0f Not Supported"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["\u274c ",(0,t.jsx)(r.strong,{children:"Internet Explorer"})," (lacks ES6 and modern audio APIs)"]}),"\n",(0,t.jsxs)(r.li,{children:["\u274c ",(0,t.jsx)(r.strong,{children:"Node.js"})," (server-side environments - no DOM/HTMLAudioElement)"]}),"\n",(0,t.jsxs)(r.li,{children:["\u274c ",(0,t.jsx)(r.strong,{children:"Web Workers"})," (no DOM access for audio elements)"]}),"\n",(0,t.jsxs)(r.li,{children:["\u274c ",(0,t.jsx)(r.strong,{children:"Very old mobile browsers"})," (Android < 7, iOS < 10)"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"-feature-detection",children:"\ud83d\udd0d Feature Detection"}),"\n",(0,t.jsx)(r.p,{children:"Before using Audio Channel Queue, you can check if the browser supports the required features:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"function isBrowserSupported(): boolean {\r\n  // Check for HTMLAudioElement support\r\n  if (typeof Audio === 'undefined') {\r\n    console.error('HTMLAudioElement not supported');\r\n    return false;\r\n  }\r\n\r\n  // Check for Promise support\r\n  if (typeof Promise === 'undefined') {\r\n    console.error('Promises not supported');\r\n    return false;\r\n  }\r\n\r\n  // Check for ES6 features\r\n  try {\r\n    new Function('const test = () => {};');\r\n  } catch (e) {\r\n    console.error('ES6 arrow functions not supported');\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n// Use the detection\r\nif (isBrowserSupported()) {\r\n  import('audio-channel-queue').then(({ queueAudio }) => {\r\n    // Safe to use the library\r\n    queueAudio('./sounds/welcome.mp3');\r\n  });\r\n} else {\r\n  // Show fallback or error message\r\n  console.warn('Browser not supported for Audio Channel Queue');\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"-mobile-specific-considerations",children:"\ud83d\udcf1 Mobile-Specific Considerations"}),"\n",(0,t.jsx)(r.h3,{id:"ios-audio-policies",children:"iOS Audio Policies"}),"\n",(0,t.jsx)(r.p,{children:"iOS has strict audio policies that affect all web audio:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// iOS requires user interaction before playing audio\r\ndocument.addEventListener('click', async () => {\r\n  // This will work on iOS after user interaction\r\n  await queueAudio('./sounds/welcome.mp3');\r\n}, { once: true });\r\n\r\n// Alternative: Create a \"Start Audio\" button\r\nfunction createAudioStartButton() {\r\n  const button = document.createElement('button');\r\n  button.textContent = '\ud83c\udfb5 Enable Audio';\r\n  button.onclick = async () => {\r\n    await queueAudio('./sounds/welcome.mp3');\r\n    button.style.display = 'none';\r\n  };\r\n  document.body.appendChild(button);\r\n}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"android-audio-considerations",children:"Android Audio Considerations"}),"\n",(0,t.jsx)(r.p,{children:"Most modern Android browsers work well, but some older versions may have limitations:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// Check for autoplay support\r\nfunction canAutoplay(): Promise<boolean> {\r\n  const audio = new Audio();\r\n  const promise = audio.play();\r\n  \r\n  if (promise !== undefined) {\r\n    return promise.then(() => {\r\n      audio.pause();\r\n      return true;\r\n    }).catch(() => false);\r\n  }\r\n  \r\n  return Promise.resolve(false);\r\n}\r\n\r\n// Use autoplay detection\r\ncanAutoplay().then(canPlay => {\r\n  if (canPlay) {\r\n    // Can start audio immediately\r\n    queueAudio('./sounds/welcome.mp3');\r\n  } else {\r\n    // Need user interaction first\r\n    createAudioStartButton();\r\n  }\r\n});\n"})}),"\n",(0,t.jsx)(r.h2,{id:"-polyfills-and-fallbacks",children:"\ud83d\udd27 Polyfills and Fallbacks"}),"\n",(0,t.jsx)(r.h3,{id:"promise-polyfill-for-very-old-browsers",children:"Promise Polyfill (for very old browsers)"}),"\n",(0,t.jsx)(r.p,{children:"If you need to support older browsers without Promise support:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-html",children:'\x3c!-- Add this before your main script --\x3e\r\n<script src="https://cdn.jsdelivr.net/npm/es6-promise@4.2.8/dist/es6-promise.auto.min.js"><\/script>\n'})}),"\n",(0,t.jsx)(r.h3,{id:"audio-format-fallbacks",children:"Audio Format Fallbacks"}),"\n",(0,t.jsx)(r.p,{children:"Provide multiple audio formats for maximum compatibility:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"import { queueAudio } from 'audio-channel-queue';\r\n\r\nasync function playWithFallback(baseName: string) {\r\n  const formats = ['.mp3', '.ogg', '.wav'];\r\n  \r\n  for (const format of formats) {\r\n    try {\r\n      await queueAudio(`${baseName}${format}`);\r\n      return; // Success - stop trying other formats\r\n    } catch (error) {\r\n      console.warn(`Failed to load ${baseName}${format}`);\r\n    }\r\n  }\r\n  \r\n  console.error(`Could not load ${baseName} in any format`);\r\n}\r\n\r\n// Usage\r\nawait playWithFallback('./sounds/welcome');\n"})}),"\n",(0,t.jsx)(r.h2,{id:"-testing-browser-support",children:"\ud83e\uddea Testing Browser Support"}),"\n",(0,t.jsx)(r.h3,{id:"manual-testing-script",children:"Manual Testing Script"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-html",children:"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <title>Audio Channel Queue Browser Test</title>\r\n</head>\r\n<body>\r\n  <h1>Browser Compatibility Test</h1>\r\n  <div id=\"results\"></div>\r\n  \r\n  <script type=\"module\">\r\n    const results = document.getElementById('results');\r\n    \r\n    async function runTests() {\r\n      const tests = [\r\n        {\r\n          name: 'HTMLAudioElement',\r\n          test: () => typeof Audio !== 'undefined'\r\n        },\r\n        {\r\n          name: 'Promises',\r\n          test: () => typeof Promise !== 'undefined'\r\n        },\r\n        {\r\n          name: 'ES6 Arrow Functions',\r\n          test: () => {\r\n            try {\r\n              new Function('const test = () => {};');\r\n              return true;\r\n            } catch (e) {\r\n              return false;\r\n            }\r\n          }\r\n        },\r\n        {\r\n          name: 'Audio Channel Queue Import',\r\n          test: async () => {\r\n            try {\r\n              const module = await import('audio-channel-queue');\r\n              return typeof module.queueAudio === 'function';\r\n            } catch (e) {\r\n              return false;\r\n            }\r\n          }\r\n        }\r\n      ];\r\n      \r\n      for (const test of tests) {\r\n        try {\r\n          const result = await test.test();\r\n          results.innerHTML += `<p>\u2705 ${test.name}: ${result ? 'PASS' : 'FAIL'}</p>`;\r\n        } catch (error) {\r\n          results.innerHTML += `<p>\u274c ${test.name}: ERROR - ${error.message}</p>`;\r\n        }\r\n      }\r\n    }\r\n    \r\n    runTests();\r\n  <\/script>\r\n</body>\r\n</html>\n"})}),"\n",(0,t.jsx)(r.h3,{id:"automated-testing-with-playwright",children:"Automated Testing with Playwright"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// test-browser-support.spec.ts\r\nimport { test, expect } from '@playwright/test';\r\n\r\nconst browsers = [\r\n  'chromium',\r\n  'firefox', \r\n  'webkit'\r\n];\r\n\r\nfor (const browserName of browsers) {\r\n  test(`Audio Channel Queue works in ${browserName}`, async ({ page }) => {\r\n    // Navigate to your test page\r\n    await page.goto('/audio-test.html');\r\n    \r\n    // Test basic functionality\r\n    const result = await page.evaluate(async () => {\r\n      const { queueAudio } = await import('audio-channel-queue');\r\n      \r\n      try {\r\n        // This should not throw if the browser is supported\r\n        await queueAudio('data:audio/wav;base64,UklGRigAAABXQVZFZm10...');\r\n        return 'success';\r\n      } catch (error) {\r\n        return error.message;\r\n      }\r\n    });\r\n    \r\n    expect(result).toBe('success');\r\n  });\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"-best-practices-for-cross-browser-support",children:"\ud83c\udfaf Best Practices for Cross-Browser Support"}),"\n",(0,t.jsxs)(r.h3,{id:"1-progressive-enhancement",children:["1. ",(0,t.jsx)(r.strong,{children:"Progressive Enhancement"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// Start with basic functionality, enhance as features are available\r\nif (isBrowserSupported()) {\r\n  // Full audio functionality\r\n  const audioManager = new AudioManager();\r\n  audioManager.start();\r\n} else {\r\n  // Fallback: show static content or alternative experience\r\n  showFallbackContent();\r\n}\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"2-graceful-degradation",children:["2. ",(0,t.jsx)(r.strong,{children:"Graceful Degradation"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// Try advanced features, fall back gracefully\r\ntry {\r\n  // Try with advanced options\r\n  await queueAudio('./music.mp3', 0, { \r\n    loop: true, \r\n    volume: 0.5 \r\n  });\r\n} catch (error) {\r\n  // Fall back to basic playback\r\n  await queueAudio('./music.mp3');\r\n}\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"3-feature-detection-over-browser-detection",children:["3. ",(0,t.jsx)(r.strong,{children:"Feature Detection Over Browser Detection"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// Good: Test for specific features\r\nconst hasAudioContext = 'AudioContext' in window || 'webkitAudioContext' in window;\r\n\r\n// Avoid: Browser sniffing\r\n// const isChrome = /Chrome/.test(navigator.userAgent); // Don't do this\n"})}),"\n",(0,t.jsx)(r.h2,{id:"-browser-usage-statistics",children:"\ud83d\udcca Browser Usage Statistics"}),"\n",(0,t.jsx)(r.p,{children:"Based on current web usage (2024):"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Chrome-based browsers"}),": ~65% (Chrome, Edge, Opera, Samsung Internet)"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Safari/WebKit"}),": ~20% (Safari Desktop/Mobile)"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Firefox"}),": ~8%"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Other"}),": ~7%"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:["This means Audio Channel Queue will work for ",(0,t.jsx)(r.strong,{children:"93%+ of all web users"})," with modern browsers."]}),"\n",(0,t.jsx)(r.h2,{id:"-additional-resources",children:"\ud83d\udd17 Additional Resources"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"https://caniuse.com/audio",children:"Can I Use - HTMLAudioElement"})})," - Audio element support"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"https://caniuse.com/promises",children:"Can I Use - Promises"})})," - Promise support"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement",children:"MDN - HTMLAudioElement"})})," - Audio API documentation"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"https://caniuse.com/audio-api",children:"Web Audio API Support"})})," - Advanced audio features"]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsxs)(r.p,{children:["Need help with a specific browser issue? Check our ",(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"../migration/troubleshooting",children:"troubleshooting guide"})})," or ",(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"https://github.com/tonycarpenter21/audio-channel-queue/issues",children:"open an issue"})})," with your browser details! \ud83d\ude80"]})]})}function u(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>d});var s=n(6540);const t={},i=s.createContext(t);function o(e){const r=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:r},e.children)}}}]);