"use strict";(self.webpackChunkaudio_queue_docs=self.webpackChunkaudio_queue_docs||[]).push([[751],{8453:(e,n,l)=>{l.d(n,{R:()=>i,x:()=>o});var r=l(6540);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}},8871:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>t,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"api-reference/volume-control","title":"Volume Control","description":"Control audio levels across individual channels or all channels simultaneously.","source":"@site/docs/api-reference/volume-control.md","sourceDirName":"api-reference","slug":"/api-reference/volume-control","permalink":"/audio-queue-docs/api-reference/volume-control","draft":false,"unlisted":false,"editUrl":"https://github.com/tonycarpenter21/audio-queue-docs/tree/main/docs/api-reference/volume-control.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Queue Management","permalink":"/audio-queue-docs/api-reference/queue-management"},"next":{"title":"Pause & Resume","permalink":"/audio-queue-docs/api-reference/pause-resume"}}');var s=l(4848),a=l(8453);const i={},o="Volume Control",t={},u=[{value:"setChannelVolume",id:"setchannelvolume",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Examples",id:"examples",level:3},{value:"Real-world Usage",id:"real-world-usage",level:3},{value:"getChannelVolume",id:"getchannelvolume",level:2},{value:"Syntax",id:"syntax-1",level:3},{value:"Parameters",id:"parameters-1",level:3},{value:"Returns",id:"returns",level:3},{value:"Examples",id:"examples-1",level:3},{value:"setAllChannelsVolume",id:"setallchannelsvolume",level:2},{value:"Syntax",id:"syntax-2",level:3},{value:"Parameters",id:"parameters-2",level:3},{value:"Examples",id:"examples-2",level:3},{value:"setVolumeDucking",id:"setvolumeducking",level:2},{value:"Syntax",id:"syntax-3",level:3},{value:"Parameters",id:"parameters-3",level:3},{value:"Examples",id:"examples-3",level:3},{value:"Real-world Usage",id:"real-world-usage-1",level:3},{value:"clearVolumeDucking",id:"clearvolumeducking",level:2},{value:"Syntax",id:"syntax-4",level:3},{value:"Parameters",id:"parameters-4",level:3},{value:"Examples",id:"examples-4",level:3},{value:"Volume Best Practices",id:"volume-best-practices",level:2},{value:"1. Volume Curves",id:"1-volume-curves",level:3},{value:"\ud83c\udfb5 Smooth Volume Transitions &amp; Easing Functions",id:"-smooth-volume-transitions--easing-functions",level:2},{value:"Available Easing Functions",id:"available-easing-functions",level:3},{value:"Linear Easing",id:"linear-easing",level:4},{value:"Ease-In",id:"ease-in",level:4},{value:"Ease-Out",id:"ease-out",level:4},{value:"Ease-In-Out",id:"ease-in-out",level:4},{value:"Custom Volume Fade Implementation",id:"custom-volume-fade-implementation",level:3},{value:"Real-World Easing Examples",id:"real-world-easing-examples",level:3},{value:"Gaming Audio Manager",id:"gaming-audio-manager",level:4},{value:"Podcast Player",id:"podcast-player",level:4},{value:"Why Easing Matters",id:"why-easing-matters",level:3},{value:"Human Perception",id:"human-perception",level:4},{value:"Professional Audio Standards",id:"professional-audio-standards",level:4},{value:"Technical Benefits",id:"technical-benefits",level:4},{value:"Volume Persistence",id:"volume-persistence",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"volume-control",children:"Volume Control"})}),"\n",(0,s.jsx)(n.p,{children:"Control audio levels across individual channels or all channels simultaneously."}),"\n",(0,s.jsx)(n.h2,{id:"setchannelvolume",children:"setChannelVolume"}),"\n",(0,s.jsx)(n.p,{children:"Sets the volume for a specific audio channel."}),"\n",(0,s.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"setChannelVolume(channelNumber: number, volume: number): void\n"})}),"\n",(0,s.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"channelNumber"})," (number): The channel number (0-based index)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"volume"})," (number): Volume level between 0.0 (muted) and 1.0 (full volume)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { setChannelVolume } from 'audio-channel-queue';\r\n\r\n// Set channel 0 to half volume\r\nsetChannelVolume(0, 0.5);\r\n\r\n// Mute channel 1\r\nsetChannelVolume(1, 0);\r\n\r\n// Set channel 2 to full volume\r\nsetChannelVolume(2, 1.0);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"real-world-usage",children:"Real-world Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"class GameAudioManager {\r\n  private musicVolume: number = 0.7;\r\n  private sfxVolume: number = 0.8;\r\n\r\n  updateMusicVolume(volume: number): void {\r\n    this.musicVolume = volume;\r\n    setChannelVolume(0, volume); // Music channel\r\n  }\r\n\r\n  updateSFXVolume(volume: number): void {\r\n    this.sfxVolume = volume;\r\n    setChannelVolume(1, volume); // SFX channel\r\n  }\r\n\r\n  muteAllAudio(): void {\r\n    setChannelVolume(0, 0); // Mute music\r\n    setChannelVolume(1, 0); // Mute SFX\r\n  }\r\n\r\n  restoreVolumes(): void {\r\n    setChannelVolume(0, this.musicVolume);\r\n    setChannelVolume(1, this.sfxVolume);\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"getchannelvolume",children:"getChannelVolume"}),"\n",(0,s.jsx)(n.p,{children:"Retrieves the current volume level for a specific channel."}),"\n",(0,s.jsx)(n.h3,{id:"syntax-1",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"getChannelVolume(channelNumber: number): number\n"})}),"\n",(0,s.jsx)(n.h3,{id:"parameters-1",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"channelNumber"})," (number): The channel number to query"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"number"}),": Current volume level (0.0 to 1.0)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"examples-1",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { getChannelVolume, setChannelVolume } from 'audio-channel-queue';\r\n\r\n// Set and then get volume\r\nsetChannelVolume(0, 0.75);\r\nconst currentVolume = getChannelVolume(0);\r\nconsole.log(currentVolume); // 0.75\r\n\r\n// Check if channel is muted\r\nif (getChannelVolume(1) === 0) {\r\n  console.log('Channel 1 is muted');\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"setallchannelsvolume",children:"setAllChannelsVolume"}),"\n",(0,s.jsx)(n.p,{children:"Sets the same volume level for all audio channels."}),"\n",(0,s.jsx)(n.h3,{id:"syntax-2",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"setAllChannelsVolume(volume: number): void\n"})}),"\n",(0,s.jsx)(n.h3,{id:"parameters-2",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"volume"})," (number): Volume level between 0.0 and 1.0 to apply to all channels"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"examples-2",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { setAllChannelsVolume } from 'audio-channel-queue';\r\n\r\n// Set all channels to half volume\r\nsetAllChannelsVolume(0.5);\r\n\r\n// Mute all channels\r\nsetAllChannelsVolume(0);\r\n\r\n// Master volume control\r\nfunction setMasterVolume(volume: number): void {\r\n  // Clamp volume between 0 and 1\r\n  const clampedVolume = Math.max(0, Math.min(1, volume));\r\n  setAllChannelsVolume(clampedVolume);\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"setvolumeducking",children:"setVolumeDucking"}),"\n",(0,s.jsx)(n.p,{children:"Temporarily reduces volume on specified channels (ducking effect)."}),"\n",(0,s.jsx)(n.h3,{id:"syntax-3",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"setVolumeDucking(channelNumbers: number[], duckVolume: number): void\n"})}),"\n",(0,s.jsx)(n.h3,{id:"parameters-3",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"channelNumbers"})," (number[]): Array of channel numbers to duck"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"duckVolume"})," (number): Reduced volume level (0.0 to 1.0)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"examples-3",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { setVolumeDucking, clearVolumeDucking } from 'audio-channel-queue';\r\n\r\n// Duck background music when dialog plays\r\nfunction playDialog(): void {\r\n  // Reduce music (channel 0) and ambient sounds (channel 2) to 20%\r\n  setVolumeDucking([0, 2], 0.2);\r\n  \r\n  // Play dialog on channel 1\r\n  queueAudio('/audio/dialog/important-message.mp3', 1);\r\n}\r\n\r\n// Restore original volumes when dialog ends\r\nonAudioComplete(1, () => {\r\n  clearVolumeDucking([0, 2]);\r\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"real-world-usage-1",children:"Real-world Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"class PodcastPlayer {\r\n  private readonly MUSIC_CHANNEL = 0;\r\n  private readonly VOICE_CHANNEL = 1;\r\n  private readonly ADS_CHANNEL = 2;\r\n\r\n  playIntroMusic(): void {\r\n    queueAudio('/audio/intro-music.mp3', this.MUSIC_CHANNEL);\r\n  }\r\n\r\n  startPodcast(): void {\r\n    // Duck intro music when podcast starts\r\n    setVolumeDucking([this.MUSIC_CHANNEL], 0.1);\r\n    queueAudio('/audio/podcast-episode.mp3', this.VOICE_CHANNEL);\r\n  }\r\n\r\n  playAd(): void {\r\n    // Duck both music and podcast for ad\r\n    setVolumeDucking([this.MUSIC_CHANNEL, this.VOICE_CHANNEL], 0.05);\r\n    queueAudio('/audio/advertisement.mp3', this.ADS_CHANNEL);\r\n  }\r\n\r\n  restoreNormalVolumes(): void {\r\n    clearVolumeDucking([this.MUSIC_CHANNEL, this.VOICE_CHANNEL]);\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"clearvolumeducking",children:"clearVolumeDucking"}),"\n",(0,s.jsx)(n.p,{children:"Restores original volume levels for channels that were ducked."}),"\n",(0,s.jsx)(n.h3,{id:"syntax-4",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"clearVolumeDucking(channelNumbers: number[]): void\n"})}),"\n",(0,s.jsx)(n.h3,{id:"parameters-4",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"channelNumbers"})," (number[]): Array of channel numbers to restore"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"examples-4",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { setVolumeDucking, clearVolumeDucking } from 'audio-channel-queue';\r\n\r\n// Temporary volume reduction for notification\r\nfunction playNotification(): void {\r\n  setVolumeDucking([0, 1], 0.3); // Duck channels 0 and 1\r\n  \r\n  setTimeout(() => {\r\n    clearVolumeDucking([0, 1]); // Restore after 2 seconds\r\n  }, 2000);\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"volume-best-practices",children:"Volume Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"1-volume-curves",children:"1. Volume Curves"}),"\n",(0,s.jsx)(n.p,{children:"Use logarithmic scaling for more natural volume perception:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function linearToLogarithmic(linear: number): number {\r\n  return Math.pow(linear, 2);\r\n}\r\n\r\nfunction setNaturalVolume(channel: number, linearVolume: number): void {\r\n  const logVolume = linearToLogarithmic(linearVolume);\r\n  setChannelVolume(channel, logVolume);\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-smooth-volume-transitions--easing-functions",children:"\ud83c\udfb5 Smooth Volume Transitions & Easing Functions"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"audio-channel-queue"})," package includes built-in easing functions for creating smooth, natural-sounding volume transitions. These mathematical functions control how volume changes over time, making audio transitions feel more professional and pleasant to listen to."]}),"\n",(0,s.jsx)(n.h3,{id:"available-easing-functions",children:"Available Easing Functions"}),"\n",(0,s.jsx)(n.h4,{id:"linear-easing",children:"Linear Easing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Constant rate of change - mechanical feeling\r\nlinear: (t: number): number => t\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use case"}),": Technical applications, precise timing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Feel"}),": Mechanical, robotic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Best for"}),": UI sound effects, technical demos"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"ease-in",children:"Ease-In"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Starts slow, accelerates - builds anticipation\r\n'ease-in': (t: number): number => t * t\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use case"}),": Fade-ins, building tension"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Feel"}),": Gradual buildup, anticipation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Best for"}),": Background music fade-in, dramatic reveals"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"ease-out",children:"Ease-Out"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Starts fast, decelerates - natural ending\r\n'ease-out': (t: number): number => t * (2 - t)\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use case"}),": Fade-outs, natural endings"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Feel"}),": Smooth deceleration, gentle conclusion"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Best for"}),": Ending music, pause transitions"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"ease-in-out",children:"Ease-In-Out"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Slow start and end, fast middle - most natural\r\n'ease-in-out': (t: number): number => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use case"}),": General-purpose smooth transitions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Feel"}),": Most natural to human perception"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Best for"}),": Volume ducking, crossfades, general transitions"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"custom-volume-fade-implementation",children:"Custom Volume Fade Implementation"}),"\n",(0,s.jsx)(n.p,{children:"You can implement smooth volume transitions using the existing volume controls and easing functions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"async function fadeVolume(\r\n  channelNumber: number, \r\n  targetVolume: number, \r\n  duration: number = 1000,\r\n  easing: 'linear' | 'ease-in' | 'ease-out' | 'ease-in-out' = 'ease-in-out'\r\n): Promise<void> {\r\n  const currentVolume = getChannelVolume(channelNumber);\r\n  const steps = 20;\r\n  const stepDuration = duration / steps;\r\n  \r\n  // Easing function implementations\r\n  const easingFunctions = {\r\n    linear: (t: number): number => t,\r\n    'ease-in': (t: number): number => t * t,\r\n    'ease-out': (t: number): number => t * (2 - t),\r\n    'ease-in-out': (t: number): number => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t\r\n  };\r\n  \r\n  const easingFunc = easingFunctions[easing];\r\n  \r\n  return new Promise((resolve) => {\r\n    let currentStep = 0;\r\n    \r\n    const interval = setInterval(() => {\r\n      currentStep++;\r\n      const progress = currentStep / steps;\r\n      const easedProgress = easingFunc(progress);\r\n      const newVolume = currentVolume + (targetVolume - currentVolume) * easedProgress;\r\n      \r\n      setChannelVolume(channelNumber, newVolume);\r\n      \r\n      if (currentStep >= steps) {\r\n        clearInterval(interval);\r\n        setChannelVolume(channelNumber, targetVolume); // Ensure exact final value\r\n        resolve();\r\n      }\r\n    }, stepDuration);\r\n  });\r\n}\r\n\r\n// Usage examples\r\nawait fadeVolume(0, 0, 2000, 'ease-out');     // Fade out over 2 seconds\r\nawait fadeVolume(1, 1, 1000, 'ease-in');      // Fade in over 1 second  \r\nawait fadeVolume(0, 0.3, 500, 'ease-in-out'); // Duck to 30% volume\n"})}),"\n",(0,s.jsx)(n.h3,{id:"real-world-easing-examples",children:"Real-World Easing Examples"}),"\n",(0,s.jsx)(n.h4,{id:"gaming-audio-manager",children:"Gaming Audio Manager"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"class GameAudioManager {\r\n  async startLevel(): Promise<void> {\r\n    // Start background music with fade-in\r\n    await queueAudio('./music/level-bg.mp3', 0, { loop: true, volume: 0 });\r\n    await fadeVolume(0, 0.6, 2000, 'ease-in');\r\n  }\r\n  \r\n  async playDialogue(audioFile: string): Promise<void> {\r\n    // Duck background music for dialogue\r\n    await fadeVolume(0, 0.1, 500, 'ease-in-out');\r\n    await queueAudio(audioFile, 1);\r\n    \r\n    // Restore background music when dialogue ends\r\n    onAudioComplete(1, async () => {\r\n      await fadeVolume(0, 0.6, 500, 'ease-in-out');\r\n    });\r\n  }\r\n  \r\n  async endLevel(): Promise<void> {\r\n    // Fade out all audio\r\n    await Promise.all([\r\n      fadeVolume(0, 0, 3000, 'ease-out'),\r\n      fadeVolume(1, 0, 1000, 'ease-out')\r\n    ]);\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"podcast-player",children:"Podcast Player"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"class PodcastPlayer {\r\n  async insertAd(): Promise<void> {\r\n    // Fade out podcast, play ad, fade back in\r\n    await fadeVolume(0, 0.1, 800, 'ease-in-out');\r\n    await queueAudioPriority('./ads/sponsor.mp3', 1);\r\n    \r\n    onAudioComplete(1, async () => {\r\n      await fadeVolume(0, 1.0, 800, 'ease-in-out');\r\n    });\r\n  }\r\n  \r\n  async pauseWithFade(): Promise<void> {\r\n    await fadeVolume(0, 0, 1000, 'ease-out');\r\n    await pauseChannel(0);\r\n    setChannelVolume(0, 1.0); // Reset for resume\r\n  }\r\n  \r\n  async resumeWithFade(): Promise<void> {\r\n    setChannelVolume(0, 0);\r\n    await resumeChannel(0);\r\n    await fadeVolume(0, 1.0, 1000, 'ease-in');\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"why-easing-matters",children:"Why Easing Matters"}),"\n",(0,s.jsx)(n.h4,{id:"human-perception",children:"Human Perception"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Linear transitions"})," sound mechanical and unnatural"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Eased transitions"})," match how we naturally expect sound to behave"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Logarithmic perception"})," - our ears are more sensitive to changes at lower volumes"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"professional-audio-standards",children:"Professional Audio Standards"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Broadcasting"}),": Smooth fades prevent jarring transitions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Gaming"}),": Immersive audio requires seamless volume changes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Music Production"}),": Crossfades and automation use easing curves"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"technical-benefits",children:"Technical Benefits"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CPU Efficiency"}),": Fewer audio dropouts with smooth transitions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Memory Management"}),": Gradual changes prevent sudden resource spikes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"User Experience"}),": Professional-feeling audio enhances perceived quality"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"volume-persistence",children:"Volume Persistence"}),"\n",(0,s.jsx)(n.p,{children:"Save and restore user preferences:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"class VolumeManager {\r\n  private readonly STORAGE_KEY = 'audioChannelVolumes';\r\n\r\n  saveVolumes(): void {\r\n    const volumes = {\r\n      music: getChannelVolume(0),\r\n      sfx: getChannelVolume(1),\r\n      voice: getChannelVolume(2),\r\n    };\r\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(volumes));\r\n  }\r\n\r\n  loadVolumes(): void {\r\n    const saved = localStorage.getItem(this.STORAGE_KEY);\r\n    if (saved) {\r\n      const volumes = JSON.parse(saved);\r\n      setChannelVolume(0, volumes.music || 0.7);\r\n      setChannelVolume(1, volumes.sfx || 0.8);\r\n      setChannelVolume(2, volumes.voice || 1.0);\r\n    }\r\n  }\r\n} \n"})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);