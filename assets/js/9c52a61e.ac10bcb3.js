"use strict";(self.webpackChunkaudio_queue_docs=self.webpackChunkaudio_queue_docs||[]).push([[213],{2331:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>u,default:()=>a,frontMatter:()=>c,metadata:()=>i,toc:()=>s});const i=JSON.parse('{"id":"advanced/volume-ducking","title":"Volume Ducking","description":"Advanced volume control and ducking techniques for audio-channel-queue","source":"@site/docs/advanced/volume-ducking.md","sourceDirName":"advanced","slug":"/advanced/volume-ducking","permalink":"/audio-queue-docs/advanced/volume-ducking","draft":false,"unlisted":false,"editUrl":"https://github.com/tonycarpenter21/audio-queue-docs/tree/main/docs/advanced/volume-ducking.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Volume Ducking","description":"Advanced volume control and ducking techniques for audio-channel-queue","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Types & Interfaces","permalink":"/audio-queue-docs/api-reference/types-interfaces"},"next":{"title":"Troubleshooting","permalink":"/audio-queue-docs/migration/troubleshooting"}}');var t=o(4848),r=o(8453);const c={title:"Volume Ducking",description:"Advanced volume control and ducking techniques for audio-channel-queue",sidebar_position:1},u="Volume Ducking",l={},s=[{value:"Coming Soon",id:"coming-soon",level:2},{value:"Quick Example",id:"quick-example",level:2},{value:"References",id:"references",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"volume-ducking",children:"Volume Ducking"})}),"\n",(0,t.jsx)(n.p,{children:"Advanced volume control techniques for managing multiple audio channels."}),"\n",(0,t.jsx)(n.h2,{id:"coming-soon",children:"Coming Soon"}),"\n",(0,t.jsxs)(n.p,{children:["This section is under development. For now, check out our ",(0,t.jsx)(n.a,{href:"https://tonycarpenter21.github.io/audio-queue-demo/",children:"live demo"})," for volume control examples."]}),"\n",(0,t.jsx)(n.h2,{id:"quick-example",children:"Quick Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { setChannelVolume, getChannelVolume } from 'audio-channel-queue';\r\n\r\n// Basic volume control\r\nsetChannelVolume(0, 0.5);  // 50% volume\r\nsetChannelVolume(1, 0.8);  // 80% volume\r\n\r\n// Get current volume\r\nconst currentVolume = getChannelVolume(0);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"../api-reference/volume-control",children:"API Reference"})})," - Volume control functions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"https://tonycarpenter21.github.io/audio-queue-demo/",children:"Live Demo"})})," - Interactive examples"]}),"\n"]})]})}function a(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>c,x:()=>u});var i=o(6540);const t={},r=i.createContext(t);function c(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function u(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);