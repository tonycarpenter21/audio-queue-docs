"use strict";(self.webpackChunkaudio_queue_docs=self.webpackChunkaudio_queue_docs||[]).push([[90],{7456:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"api-reference/pause-resume","title":"Pause & Resume","description":"Control playback state across individual channels or all channels simultaneously.","source":"@site/docs/api-reference/pause-resume.md","sourceDirName":"api-reference","slug":"/api-reference/pause-resume","permalink":"/audio-queue-docs/api-reference/pause-resume","draft":false,"unlisted":false,"editUrl":"https://github.com/tonycarpenter21/audio-queue-docs/tree/main/docs/api-reference/pause-resume.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Volume Control","permalink":"/audio-queue-docs/api-reference/volume-control"},"next":{"title":"Event Listeners","permalink":"/audio-queue-docs/api-reference/event-listeners"}}');var r=a(4848),l=a(8453);const t={},i="Pause & Resume",u={},c=[{value:"pauseChannel",id:"pausechannel",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Examples",id:"examples",level:3},{value:"Real-world Usage",id:"real-world-usage",level:3},{value:"resumeChannel",id:"resumechannel",level:2},{value:"Syntax",id:"syntax-1",level:3},{value:"Parameters",id:"parameters-1",level:3},{value:"Examples",id:"examples-1",level:3},{value:"togglePauseChannel",id:"togglepausechannel",level:2},{value:"Syntax",id:"syntax-2",level:3},{value:"Parameters",id:"parameters-2",level:3},{value:"Examples",id:"examples-2",level:3},{value:"pauseAllChannels",id:"pauseallchannels",level:2},{value:"Syntax",id:"syntax-3",level:3},{value:"Examples",id:"examples-3",level:3},{value:"Real-world Usage",id:"real-world-usage-1",level:3},{value:"resumeAllChannels",id:"resumeallchannels",level:2},{value:"Syntax",id:"syntax-4",level:3},{value:"Examples",id:"examples-4",level:3},{value:"togglePauseAllChannels",id:"togglepauseallchannels",level:2},{value:"Syntax",id:"syntax-5",level:3},{value:"Examples",id:"examples-5",level:3},{value:"isChannelPaused",id:"ischannelpaused",level:2},{value:"Syntax",id:"syntax-6",level:3},{value:"Parameters",id:"parameters-3",level:3},{value:"Returns",id:"returns",level:3},{value:"Examples",id:"examples-6",level:3},{value:"getAllChannelsPauseState",id:"getallchannelspausestate",level:2},{value:"Syntax",id:"syntax-7",level:3},{value:"Returns",id:"returns-1",level:3},{value:"Examples",id:"examples-7",level:3},{value:"Real-world Usage",id:"real-world-usage-2",level:3},{value:"Advanced Pause/Resume Patterns",id:"advanced-pauseresume-patterns",level:2},{value:"1. Smart Auto-Pause",id:"1-smart-auto-pause",level:3},{value:"2. Fade Pause/Resume",id:"2-fade-pauseresume",level:3},{value:"3. Conditional Pause Control",id:"3-conditional-pause-control",level:3}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"pause--resume",children:"Pause & Resume"})}),"\n",(0,r.jsx)(n.p,{children:"Control playback state across individual channels or all channels simultaneously."}),"\n",(0,r.jsx)(n.h2,{id:"pausechannel",children:"pauseChannel"}),"\n",(0,r.jsx)(n.p,{children:"Pauses audio playback on a specific channel."}),"\n",(0,r.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"pauseChannel(channelNumber: number): void\n"})}),"\n",(0,r.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"channelNumber"})," (number): The channel number to pause (0-based index)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { pauseChannel, resumeChannel } from 'audio-channel-queue';\r\n\r\n// Pause music channel\r\npauseChannel(0);\r\n\r\n// Pause sound effects channel\r\npauseChannel(1);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"real-world-usage",children:"Real-world Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class GameAudioController {\r\n  private readonly MUSIC_CHANNEL = 0;\r\n  private readonly SFX_CHANNEL = 1;\r\n\r\n  pauseGame(): void {\r\n    // Pause all game audio when game is paused\r\n    pauseChannel(this.MUSIC_CHANNEL);\r\n    pauseChannel(this.SFX_CHANNEL);\r\n  }\r\n\r\n  pauseMusicOnly(): void {\r\n    // Keep SFX playing but pause background music\r\n    pauseChannel(this.MUSIC_CHANNEL);\r\n  }\r\n\r\n  handleUserInteraction(): void {\r\n    // Pause SFX during important dialog\r\n    pauseChannel(this.SFX_CHANNEL);\r\n  }\r\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"resumechannel",children:"resumeChannel"}),"\n",(0,r.jsx)(n.p,{children:"Resumes audio playback on a specific channel."}),"\n",(0,r.jsx)(n.h3,{id:"syntax-1",children:"Syntax"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"resumeChannel(channelNumber: number): void\n"})}),"\n",(0,r.jsx)(n.h3,{id:"parameters-1",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"channelNumber"})," (number): The channel number to resume (0-based index)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"examples-1",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { pauseChannel, resumeChannel } from 'audio-channel-queue';\r\n\r\n// Resume music channel\r\nresumeChannel(0);\r\n\r\n// Resume after temporary pause\r\nfunction temporaryPause(): void {\r\n  pauseChannel(1);\r\n  \r\n  setTimeout(() => {\r\n    resumeChannel(1); // Resume after 3 seconds\r\n  }, 3000);\r\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"togglepausechannel",children:"togglePauseChannel"}),"\n",(0,r.jsx)(n.p,{children:"Toggles the pause state of a specific channel."}),"\n",(0,r.jsx)(n.h3,{id:"syntax-2",children:"Syntax"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"togglePauseChannel(channelNumber: number): void\n"})}),"\n",(0,r.jsx)(n.h3,{id:"parameters-2",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"channelNumber"})," (number): The channel number to toggle (0-based index)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"examples-2",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { togglePauseChannel } from 'audio-channel-queue';\r\n\r\n// Toggle music playback with a single function\r\nfunction toggleMusic(): void {\r\n  togglePauseChannel(0); // Pauses if playing, resumes if paused\r\n}\r\n\r\n// Create a music player with play/pause button\r\nclass SimpleMusicPlayer {\r\n  private readonly MUSIC_CHANNEL = 0;\r\n\r\n  onPlayPauseClick(): void {\r\n    togglePauseChannel(this.MUSIC_CHANNEL);\r\n  }\r\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"pauseallchannels",children:"pauseAllChannels"}),"\n",(0,r.jsx)(n.p,{children:"Pauses audio playback on all channels simultaneously."}),"\n",(0,r.jsx)(n.h3,{id:"syntax-3",children:"Syntax"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"pauseAllChannels(): void\n"})}),"\n",(0,r.jsx)(n.h3,{id:"examples-3",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { pauseAllChannels, resumeAllChannels } from 'audio-channel-queue';\r\n\r\n// Global pause functionality\r\nfunction pauseAllAudio(): void {\r\n  pauseAllChannels();\r\n}\r\n\r\n// Pause everything when app loses focus\r\nwindow.addEventListener('blur', () => {\r\n  pauseAllChannels();\r\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"real-world-usage-1",children:"Real-world Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class ApplicationAudioManager {\r\n  pauseForPhoneCall(): void {\r\n    // Pause all audio when phone call is detected (mobile)\r\n    pauseAllChannels();\r\n  }\r\n\r\n  pauseForNotification(): void {\r\n    // Pause all audio for important system notifications\r\n    pauseAllChannels();\r\n  }\r\n\r\n  handleVisibilityChange(): void {\r\n    if (document.hidden) {\r\n      pauseAllChannels(); // Pause when tab is hidden\r\n    } else {\r\n      resumeAllChannels(); // Resume when tab becomes visible\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"resumeallchannels",children:"resumeAllChannels"}),"\n",(0,r.jsx)(n.p,{children:"Resumes audio playback on all channels simultaneously."}),"\n",(0,r.jsx)(n.h3,{id:"syntax-4",children:"Syntax"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"resumeAllChannels(): void\n"})}),"\n",(0,r.jsx)(n.h3,{id:"examples-4",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { pauseAllChannels, resumeAllChannels } from 'audio-channel-queue';\r\n\r\n// Global resume functionality\r\nfunction resumeAllAudio(): void {\r\n  resumeAllChannels();\r\n}\r\n\r\n// Resume when app regains focus\r\nwindow.addEventListener('focus', () => {\r\n  resumeAllChannels();\r\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"togglepauseallchannels",children:"togglePauseAllChannels"}),"\n",(0,r.jsx)(n.p,{children:"Toggles the pause state of all channels simultaneously."}),"\n",(0,r.jsx)(n.h3,{id:"syntax-5",children:"Syntax"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"togglePauseAllChannels(): void\n"})}),"\n",(0,r.jsx)(n.h3,{id:"examples-5",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { togglePauseAllChannels } from 'audio-channel-queue';\r\n\r\n// Master play/pause control\r\nfunction masterToggle(): void {\r\n  togglePauseAllChannels();\r\n}\r\n\r\n// Keyboard shortcut for space bar\r\ndocument.addEventListener('keydown', (event) => {\r\n  if (event.code === 'Space' && !event.target.matches('input')) {\r\n    event.preventDefault();\r\n    togglePauseAllChannels();\r\n  }\r\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"ischannelpaused",children:"isChannelPaused"}),"\n",(0,r.jsx)(n.p,{children:"Checks if a specific channel is currently paused."}),"\n",(0,r.jsx)(n.h3,{id:"syntax-6",children:"Syntax"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"isChannelPaused(channelNumber: number): boolean\n"})}),"\n",(0,r.jsx)(n.h3,{id:"parameters-3",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"channelNumber"})," (number): The channel number to check (0-based index)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"boolean"}),": ",(0,r.jsx)(n.code,{children:"true"})," if the channel is paused, ",(0,r.jsx)(n.code,{children:"false"})," if playing"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"examples-6",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { isChannelPaused, pauseChannel, resumeChannel } from 'audio-channel-queue';\r\n\r\n// Conditional pause/resume logic\r\nfunction smartToggle(channel: number): void {\r\n  if (isChannelPaused(channel)) {\r\n    resumeChannel(channel);\r\n    console.log(`Channel ${channel} resumed`);\r\n  } else {\r\n    pauseChannel(channel);\r\n    console.log(`Channel ${channel} paused`);\r\n  }\r\n}\r\n\r\n// UI state management\r\nfunction updatePlayButton(channel: number): void {\r\n  const button = document.getElementById('play-button');\r\n  if (button) {\r\n    button.textContent = isChannelPaused(channel) ? '\u25b6\ufe0f Play' : '\u23f8\ufe0f Pause';\r\n  }\r\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"getallchannelspausestate",children:"getAllChannelsPauseState"}),"\n",(0,r.jsx)(n.p,{children:"Gets the pause state for all channels."}),"\n",(0,r.jsx)(n.h3,{id:"syntax-7",children:"Syntax"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"getAllChannelsPauseState(): { [channelNumber: number]: boolean }\n"})}),"\n",(0,r.jsx)(n.h3,{id:"returns-1",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Object"}),": Map of channel numbers to their pause states"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"examples-7",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { getAllChannelsPauseState } from 'audio-channel-queue';\r\n\r\n// Get pause state for all channels\r\nconst pauseStates = getAllChannelsPauseState();\r\nconsole.log(pauseStates); // { 0: false, 1: true, 2: false }\r\n\r\n// Update UI for all channels\r\nfunction updateAllPlayButtons(): void {\r\n  const states = getAllChannelsPauseState();\r\n  \r\n  Object.entries(states).forEach(([channel, isPaused]) => {\r\n    const button = document.getElementById(`play-button-${channel}`);\r\n    if (button) {\r\n      button.textContent = isPaused ? '\u25b6\ufe0f' : '\u23f8\ufe0f';\r\n      button.className = isPaused ? 'paused' : 'playing';\r\n    }\r\n  });\r\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"real-world-usage-2",children:"Real-world Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class AudioDashboard {\r\n  private updateInterval: number | null = null;\r\n\r\n  startMonitoring(): void {\r\n    this.updateInterval = setInterval(() => {\r\n      const states = getAllChannelsPauseState();\r\n      this.updateChannelIndicators(states);\r\n    }, 100);\r\n  }\r\n\r\n  stopMonitoring(): void {\r\n    if (this.updateInterval) {\r\n      clearInterval(this.updateInterval);\r\n      this.updateInterval = null;\r\n    }\r\n  }\r\n\r\n  private updateChannelIndicators(states: { [key: number]: boolean }): void {\r\n    Object.entries(states).forEach(([channel, isPaused]) => {\r\n      const indicator = document.querySelector(`[data-channel=\"${channel}\"]`);\r\n      if (indicator) {\r\n        indicator.classList.toggle('paused', isPaused);\r\n        indicator.classList.toggle('playing', !isPaused);\r\n      }\r\n    });\r\n  }\r\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-pauseresume-patterns",children:"Advanced Pause/Resume Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"1-smart-auto-pause",children:"1. Smart Auto-Pause"}),"\n",(0,r.jsx)(n.p,{children:"Automatically pause audio based on system events:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class SmartAudioManager {\r\n  private wasPlayingBeforePause: { [channel: number]: boolean } = {};\r\n\r\n  setupAutoPause(): void {\r\n    // Auto-pause on visibility change\r\n    document.addEventListener('visibilitychange', () => {\r\n      if (document.hidden) {\r\n        this.smartPauseAll();\r\n      } else {\r\n        this.smartResumeAll();\r\n      }\r\n    });\r\n\r\n    // Auto-pause on low battery (if supported)\r\n    if ('getBattery' in navigator) {\r\n      (navigator as any).getBattery().then((battery: any) => {\r\n        battery.addEventListener('levelchange', () => {\r\n          if (battery.level < 0.1) { // Below 10%\r\n            this.smartPauseAll();\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  private smartPauseAll(): void {\r\n    const states = getAllChannelsPauseState();\r\n    \r\n    // Remember which channels were playing\r\n    Object.entries(states).forEach(([channel, isPaused]) => {\r\n      this.wasPlayingBeforePause[parseInt(channel)] = !isPaused;\r\n    });\r\n    \r\n    pauseAllChannels();\r\n  }\r\n\r\n  private smartResumeAll(): void {\r\n    // Only resume channels that were playing before pause\r\n    Object.entries(this.wasPlayingBeforePause).forEach(([channel, wasPlaying]) => {\r\n      if (wasPlaying) {\r\n        resumeChannel(parseInt(channel));\r\n      }\r\n    });\r\n    \r\n    this.wasPlayingBeforePause = {};\r\n  }\r\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-fade-pauseresume",children:"2. Fade Pause/Resume"}),"\n",(0,r.jsx)(n.p,{children:"Create smooth transitions when pausing/resuming:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"async function fadeOutAndPause(channel: number, duration: number = 1000): Promise<void> {\r\n  const originalVolume = getChannelVolume(channel);\r\n  const steps = 20;\r\n  const stepDuration = duration / steps;\r\n  const volumeStep = originalVolume / steps;\r\n\r\n  return new Promise((resolve) => {\r\n    let currentStep = 0;\r\n    \r\n    const interval = setInterval(() => {\r\n      currentStep++;\r\n      const newVolume = originalVolume - (volumeStep * currentStep);\r\n      setChannelVolume(channel, Math.max(0, newVolume));\r\n      \r\n      if (currentStep >= steps) {\r\n        clearInterval(interval);\r\n        pauseChannel(channel);\r\n        setChannelVolume(channel, originalVolume); // Restore volume for next play\r\n        resolve();\r\n      }\r\n    }, stepDuration);\r\n  });\r\n}\r\n\r\nasync function resumeAndFadeIn(channel: number, duration: number = 1000): Promise<void> {\r\n  const targetVolume = getChannelVolume(channel);\r\n  setChannelVolume(channel, 0);\r\n  resumeChannel(channel);\r\n  \r\n  const steps = 20;\r\n  const stepDuration = duration / steps;\r\n  const volumeStep = targetVolume / steps;\r\n\r\n  return new Promise((resolve) => {\r\n    let currentStep = 0;\r\n    \r\n    const interval = setInterval(() => {\r\n      currentStep++;\r\n      const newVolume = volumeStep * currentStep;\r\n      setChannelVolume(channel, Math.min(targetVolume, newVolume));\r\n      \r\n      if (currentStep >= steps) {\r\n        clearInterval(interval);\r\n        resolve();\r\n      }\r\n    }, stepDuration);\r\n  });\r\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-conditional-pause-control",children:"3. Conditional Pause Control"}),"\n",(0,r.jsx)(n.p,{children:"Pause based on application state:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class ConditionalPauseManager {\r\n  private shouldAutoPause: boolean = true;\r\n  private userPreferences = {\r\n    pauseOnLowBattery: true,\r\n    pauseOnCall: true,\r\n    pauseOnNotification: false,\r\n  };\r\n\r\n  setPausePreference(type: keyof typeof this.userPreferences, enabled: boolean): void {\r\n    this.userPreferences[type] = enabled;\r\n  }\r\n\r\n  conditionalPause(reason: string): void {\r\n    if (!this.shouldAutoPause) return;\r\n\r\n    switch (reason) {\r\n      case 'low-battery':\r\n        if (this.userPreferences.pauseOnLowBattery) {\r\n          pauseAllChannels();\r\n        }\r\n        break;\r\n      \r\n      case 'phone-call':\r\n        if (this.userPreferences.pauseOnCall) {\r\n          pauseAllChannels();\r\n        }\r\n        break;\r\n      \r\n      case 'notification':\r\n        if (this.userPreferences.pauseOnNotification) {\r\n          // Only pause non-essential channels\r\n          pauseChannel(0); // Background music\r\n          // Keep voice/SFX channels playing\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  enableAutoPause(): void {\r\n    this.shouldAutoPause = true;\r\n  }\r\n\r\n  disableAutoPause(): void {\r\n    this.shouldAutoPause = false;\r\n  }\r\n} \n"})})]})}function d(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>i});var s=a(6540);const r={},l=s.createContext(r);function t(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);